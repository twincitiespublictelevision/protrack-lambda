# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: protrack-lambda

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">1.35.1"

provider:
  name: aws
  runtime: nodejs14.x
  region: ${file(./env.json):AWS_REGION, "us-east-1"}
  stackTags:
    service: protrack-lambda
  stage: ${opt:stage, self:custom.defaultStage}
  environment:
    ES_ENDPOINT: ${file(./env.json):ES_ENDPOINT}
    PROTRACK_TZ: ${file(./env.json):PROTRACK_TZ}
  apiGateway:
    minimumCompressionSize: 15000
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "es:*"
      Resource: ${file(./env.json):ES_ARN}
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:GetObjectAcl"
        - "s3:DeleteObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "protrack-schedule-ingest-"
            - ${self:provider.stage}
            - "/"
            - "*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:GetObjectAcl"
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "protrack-schedule-ingest-backup-"
            - ${self:provider.stage}
            - "/"
            - "*"

functions:
  health:
    handler: handler.health
    memorySize: 128
    timeout: 30
    events:
      - s3:
          bucket: protrack-schedule-ingest-backup-${self:provider.stage}
          event: s3:ObjectCreated:*
    alarms:
      - name: 'BackupAcknowledgement'
        namespace: 'AWS/Lambda'
        metric: Invocations
        threshold: 12
        statistic: Sum
        period: 86400
        evaluationPeriods: 1
        comparisonOperator: LessThanOrEqualToThreshold
        treatMissingData: breaching

  ingest:
    handler: handler.ingest
    memorySize: 2048
    timeout: 60
    events:
      - s3:
          bucket: protrack-schedule-ingest-${self:provider.stage}
          event: s3:ObjectCreated:*

  all:
    handler: handler.all
    memorySize: 2048
    events:
      - http:
          path: all
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  channel:
    handler: handler.channel
    memorySize: 512
    events:
      - http:
          path: channel/{channel}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  show:
    handler: handler.show
    memorySize: 512
    events:
      - http:
          path: show/{show}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  shows:
    handler: handler.shows
    memorySize: 512
    events:
      - http:
          path: shows
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  episode:
    handler: handler.episode
    memorySize: 128
    events:
      - http:
          path: episode/{episode}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  version:
    handler: handler.version
    memorySize: 128
    events:
      - http:
          path: episode/{episode}/version/{version}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  search:
    handler: handler.search
    memorySize: 512
    events:
      - http:
          path: search/{term}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  schedule:
    handler: handler.schedule
    memorySize: 512
    events:
      - http:
          path: schedule/{year}/{month}/{day}/{granularity}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  schedule_channel:
    handler: handler.schedule_channel
    memorySize: 512
    events:
      - http:
          path: schedule/{year}/{month}/{day}/{granularity}/{channel}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-aws-alerts
package:
  exclude:
    - .serverless
    - .flowconfig
    - .gitignore
    - LICENSE
    - README.md
    - env.json
    - package.json
    - serverless.yml
    - mock.json

custom:
  defaultStage: qa
  alerts:
    topics:
      alarm:
        topic: ${self:service}-${self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${file(./env.json):NOTIFICATION_EMAIL}

  webpackIncludeModules:
    packagePath: './package.json'
